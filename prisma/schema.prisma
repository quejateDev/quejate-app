generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  password          String
  firstName         String
  lastName          String
  email             String              @unique
  phone             String
  role              UserRole
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  departmentId      String?
  emailVerified     DateTime?
  verificationToken String?             @unique
  resetToken        String?
  resetTokenExpiry  DateTime?
  isVerified        Boolean             @default(false)
  profilePicture    String?
  EmailVerification EmailVerification[]
  Like              Like[]
  notifications     Notification[]
  PQRS              PQRS[]
  assignedPQRS      PQRS[]              @relation("AssignedPQRS")
  statusHistory     PQRStatusHistory[]
  comments          Comment[]
  favorites         UserFavoriteEntity[]
  givenRatings      Rating[]            @relation("ClientGivenRatings")
  lawyerRequests    LawyerRequest[]
  lawyerProfile     Lawyer?   
  department        Department?         @relation(fields: [departmentId], references: [id])
  following         User[]              @relation("UserFollows")
  followers         User[]              @relation("UserFollows")

  entityId          String?
  Entity            Entity?             @relation(fields: [entityId], references: [id])

  @@index([departmentId])
  EntityHasUser EntityHasUser[]
}

model Lawyer {
  id              String     @id @default(uuid())
  userId          String     @unique
  user            User       @relation(fields: [userId], references: [id])
  documentType     DocumentType
  isVerified       Boolean    @default(false)
  identityDocument String
  identityDocumentImage   String?
  professionalCardImage   String?
  specialties     String[]
  description     String?
  feePerHour      Float?
  feePerService   Float?
  experienceYears Int        @default(0)
  receivedRatings Rating[]   @relation("LawyerReceivedRatings")
  lawyerRequests  LawyerRequest[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([userId])
}

model LawyerRequest {
  id          String                @id @default(uuid())
  userId      String
  lawyerId    String
  pqrId       String?
  message     String
  serviceType String?
  status      LawyerRequestStatus   @default(PENDING)
  clientContactEmail     String?  
  clientContactPhone     String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawyer      Lawyer                @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  pqr         PQRS?                 @relation(fields: [pqrId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([lawyerId])
  @@index([pqrId])
}

model Rating {
  id         String   @id @default(uuid())
  lawyerId   String
  lawyer     Lawyer   @relation(fields: [lawyerId], references: [id], name: "LawyerReceivedRatings")
  clientId   String
  client    User      @relation(fields: [clientId], references: [id], name: "ClientGivenRatings")
  score      Int      
  comment    String?
  createdAt  DateTime @default(now())

  @@unique([lawyerId, clientId])
  @@index([lawyerId])
  @@index([clientId])
}

model Department {
  id          String     @id @default(uuid())
  name        String
  email       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?
  entityId    String
  entity      Entity     @relation(fields: [entityId], references: [id])
  pqrConfig   PQRConfig?
  pqrs        PQRS[]
  employees   User[]

  @@index([entityId])
}

model Entity {
  id                String              @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categoryId        String
  imageUrl          String?
  email             String?
  municipalityId    String?
  regionalDepartmentId String?
  isVerified        Boolean             @default(false)
  Department        Department[]
  pqrs              PQRS[]
  favoritedBy       UserFavoriteEntity[]
  category          Category            @relation(fields: [categoryId], references: [id])
  Municipality      Municipality?       @relation(fields: [municipalityId], references: [id], onUpdate: NoAction)
  RegionalDepartment   RegionalDepartment?  @relation(fields: [regionalDepartmentId], references: [id], onUpdate: NoAction)
  EntityConsecutive EntityConsecutive[]
  EntityHasUser     EntityHasUser[]
  pqrConfig         PQRConfig?
  users             User[]

  @@index([categoryId])
}

model UserFavoriteEntity {
  id        String   @id @default(uuid())
  userId    String
  entityId  String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  entity    Entity   @relation(fields: [entityId], references: [id])
  
  @@unique([userId, entityId])
}

model EntityConsecutive {
  id          String    @id @default(uuid())
  entityId    String
  entity      Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  code        String    @unique
  consecutive Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([entityId])
}

model EntityHasUser {
  id        String   @id @default(uuid())
  entityId  String
  userId    String
  role      UserRole
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([entityId])
  @@index([userId])
}

model Category {
  id                String           @id @default(uuid())
  name              String           @unique
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  imageUrl          String?
  entities          Entity[]
}

model OversightEntity {
  id          String     @id @default(uuid())
  name        String     @unique
  email       String
  phone       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PQRS {
  id                String             @id @default(uuid())
  type              PQRSType
  status            PQRSStatus         @default(PENDING)
  dueDate           DateTime
  anonymous         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  creatorId         String?
  departmentId      String?
  entityId          String 
  assignedToId      String?
  private           Boolean            @default(true)
  consecutiveCode   String?
  description       String?
  subject           String?
  attachments       Attachment[]
  comments          Comment[]
  customFieldValues CustomFieldValue[]
  likes             Like[]
  PQRCustomField    PQRCustomField[]
  lawyerRequests    LawyerRequest[]
  creator           User?              @relation(fields: [creatorId], references: [id])
  assignedTo        User?              @relation("AssignedPQRS", fields: [assignedToId], references: [id])
  department        Department?         @relation(fields: [departmentId], references: [id])
  entity            Entity            @relation(fields: [entityId], references: [id])
  customFields      CustomField[]      @relation("CustomFieldToPQRS")
  statusHistory     PQRStatusHistory[]

  @@index([creatorId])
  @@index([departmentId])
  @@index([assignedToId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  pqrId     String
  userId    String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pqrId, userId])
  @@index([pqrId])                                                                                                                                                                                                                                                                                                                                                                                                   
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   
  pqrId     String  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade) 

  @@index([userId]) 
  @@index([pqrId])  
}

model PQRCustomField {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  name      String
  pqrId     String
  size      Int
  type      String
  updatedAt DateTime @updatedAt
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model PQRConfig {
  id              String        @id @default(uuid())
  allowAnonymous  Boolean       @default(false)
  requireEvidence Boolean       @default(false)
  maxResponseTime Int           @default(15)
  notifyEmail     Boolean       @default(true)
  autoAssign      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  departmentId    String?       @unique
  entityId        String?       @unique
  customFields    CustomField[]
  department      Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  entity          Entity?       @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model CustomField {
  id          String    @id @default(uuid())
  name        String
  type        String
  placeholder String?
  required    Boolean   @default(false)
  configId    String
  isForAnonymous Boolean   @default(false)
  config      PQRConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  PQRS        PQRS[]    @relation("CustomFieldToPQRS")

  @@index([configId])
}

model CustomFieldValue {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Municipality {
  id                   String             @id(map: "municipality_pkey")
  name                 String
  regionalDepartmentId String
  Entity               Entity[]
  RegionalDepartment   RegionalDepartment @relation(fields: [regionalDepartmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RegionalDepartment {
  id           String         @id(map: "regionaldepartment_pkey")
  name         String         @unique(map: "regionaldepartment_name_key")
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  Municipality Municipality[]
  Entity       Entity[]
}

model PQRStatusHistory {
  id        String     @id @default(uuid())
  status    PQRSStatus
  comment   String?
  createdAt DateTime   @default(now())
  pqrId     String
  userId    String
  pqr       PQRS       @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@index([pqrId])
  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
  CLIENT
  LAWYER
}

enum PQRSType {
  PETITION
  COMPLAINT
  CLAIM
  SUGGESTION
  REPORT
}

enum PQRSStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  FILE
  NUMBER
}

enum DocumentType {
  CC
  CE
  PPT
  NIT
  PASSPORT
  LICENSE
}

enum LawyerRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}