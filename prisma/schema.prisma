generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  password     String
  firstName    String
  lastName     String
  email        String      @unique
  phone        String
  role         UserRole
  emailVerified DateTime?
  verificationToken String? @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  departmentId String?
  Like         Like[]
  PQRS         PQRS[]
  department   Department? @relation(fields: [departmentId], references: [id])
  notifications Notification[]

  resetToken       String?
  resetTokenExpiry DateTime?
  
  // Following relationship
  following    User[]      @relation("UserFollows")
  followers    User[]      @relation("UserFollows")

  @@index([departmentId])
  EmailVerification EmailVerification[]
}

model Department {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?
  entityId    String
  entity      Entity     @relation(fields: [entityId], references: [id])
  pqrConfig   PQRConfig?
  pqrs        PQRS[]
  employees   User[]

  @@index([entityId])
}

model Entity {
  id          String       @id @default(uuid())
  name        String
  description String?
  email       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  imageUrl    String?
  Department  Department[]
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Category {
  id          String       @id @default(uuid())
  name        String      @unique
  description String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  entities    Entity[]
}

model PQRS {
  id                String             @id @default(uuid())
  type              PQRSType
  status            PQRSStatus         @default(PENDING)
  dueDate           DateTime
  anonymous         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  creatorId         String
  departmentId      String
  attachments       Attachment[]
  customFieldValues CustomFieldValue[]
  likes             Like[]
  PQRCustomField    PQRCustomField[]
  creator           User               @relation(fields: [creatorId], references: [id])
  department        Department         @relation(fields: [departmentId], references: [id])
  customFields      CustomField[]      @relation("CustomFieldToPQRS")

  @@index([creatorId])
  @@index([departmentId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  pqrId     String
  userId    String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pqrId, userId])
  @@index([pqrId])
  @@index([userId])
}

model PQRCustomField {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
  pqrsId    String
  pqrs      PQRS     @relation(fields: [pqrsId], references: [id])
}

model PQRConfig {
  id              String        @id @default(uuid())
  allowAnonymous  Boolean       @default(false)
  requireEvidence Boolean       @default(false)
  maxResponseTime Int           @default(15)
  notifyEmail     Boolean       @default(true)
  autoAssign      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  departmentId    String        @unique
  customFields    CustomField[]
  department      Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model CustomField {
  id          String    @id @default(uuid())
  name        String
  type        String
  placeholder String?
  required    Boolean   @default(false)
  configId    String
  config      PQRConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  PQRS        PQRS[]    @relation("CustomFieldToPQRS")

  @@index([configId])
}

model CustomFieldValue {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum PQRSType {
  PETITION
  COMPLAINT
  CLAIM
}

enum PQRSStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  FILE
  NUMBER
}
