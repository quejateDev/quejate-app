generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  name              String?
  image             String?
  password          String?
  email             String?               @unique
  phone             String?
  role              UserRole             @default(CLIENT)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  departmentId      String?
  emailVerified     DateTime?
  entityId          String?
  isActive          Boolean              @default(true)
  isVerified        Boolean              @default(false)
  comments          Comment[]
  EmailVerification EmailVerification[]
  EntityHasUser     EntityHasUser[]
  lawyerProfile     Lawyer?
  lawyerRequests    LawyerRequest[]
  Like              Like[]
  notifications     Notification[]
  assignedPQRS      PQRS[]               @relation("AssignedPQRS")
  PQRS              PQRS[]
  statusHistory     PQRStatusHistory[]
  givenRatings      Rating[]             @relation("ClientGivenRatings")
  department        Department?          @relation(fields: [departmentId], references: [id])
  Entity            Entity?              @relation(fields: [entityId], references: [id])
  favorites         UserFavoriteEntity[]
  following         User[]              @relation("UserFollows")
  followers         User[]              @relation("UserFollows")
  
  // NextAuth.js relations
  accounts          Account[]

  @@index([departmentId])
}

model Lawyer {
  id                    String          @id @default(uuid())
  userId                String          @unique
  documentType          DocumentType
  identityDocument      String
  specialties           String[]
  description           String?
  feePerHour            Float?
  feePerService         Float?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  isVerified            Boolean         @default(false)
  identityDocumentImage String
  professionalCardImage String
  user                  User            @relation(fields: [userId], references: [id])
  lawyerRequests        LawyerRequest[]
  receivedRatings       Rating[]        @relation("LawyerReceivedRatings")

  @@index([userId])
}

model LawyerRequest {
  id                 String              @id @default(uuid())
  userId             String
  lawyerId           String
  pqrId              String?
  message            String
  serviceType        String?
  status             LawyerRequestStatus @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  clientContactEmail String?
  clientContactPhone String?
  lawyer             Lawyer              @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  pqr                PQRS?               @relation(fields: [pqrId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lawyerId])
  @@index([pqrId])
}

model Rating {
  id        String   @id @default(uuid())
  lawyerId  String
  clientId  String
  score     Int
  createdAt DateTime @default(now())
  comment   String?
  client    User     @relation("ClientGivenRatings", fields: [clientId], references: [id])
  lawyer    Lawyer   @relation("LawyerReceivedRatings", fields: [lawyerId], references: [id])

  @@unique([lawyerId, clientId])
  @@index([lawyerId])
  @@index([clientId])
}

model Department {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?
  entityId    String
  email       String
  entity      Entity     @relation(fields: [entityId], references: [id])
  pqrConfig   PQRConfig?
  pqrs        PQRS[]
  employees   User[]

  @@index([entityId])
}

model Entity {
  id                   String               @id @default(uuid())
  name                 String
  description          String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  categoryId           String
  imageUrl             String?
  email                String?
  municipalityId       String?
  isVerified           Boolean              @default(false)
  regionalDepartmentId String?
  Department           Department[]
  category             Category             @relation(fields: [categoryId], references: [id])
  Municipality         Municipality?        @relation(fields: [municipalityId], references: [id], onUpdate: NoAction)
  RegionalDepartment   RegionalDepartment?  @relation(fields: [regionalDepartmentId], references: [id], onUpdate: NoAction)
  EntityConsecutive    EntityConsecutive[]
  EntityHasUser        EntityHasUser[]
  pqrConfig            PQRConfig?
  pqrs                 PQRS[]
  users                User[]
  favoritedBy          UserFavoriteEntity[]

  @@index([categoryId])
}

model UserFavoriteEntity {
  id        String   @id @default(uuid())
  userId    String
  entityId  String
  createdAt DateTime @default(now())
  entity    Entity   @relation(fields: [entityId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, entityId])
}

model EntityConsecutive {
  id          String    @id @default(uuid())
  entityId    String
  code        String    @unique
  consecutive Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  entity      Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([entityId])
}

model EntityHasUser {
  id       String   @id @default(uuid())
  entityId String
  userId   String
  role     UserRole
  entity   Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([entityId])
  @@index([userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
  entities    Entity[]
}

model OversightEntity {
  id                   String              @id @default(uuid())
  name                 String              @unique
  email                String
  phone                String?
  description          String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  municipalityId       String?
  regionalDepartmentId String?
  Municipality         Municipality?       @relation(fields: [municipalityId], references: [id], onUpdate: NoAction)
  RegionalDepartment   RegionalDepartment? @relation(fields: [regionalDepartmentId], references: [id], onUpdate: NoAction)
}

model PQRS {
  id                String             @id @default(uuid())
  type              PQRSType
  status            PQRSStatus         @default(PENDING)
  dueDate           DateTime
  anonymous         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  creatorId         String?
  departmentId      String?
  private           Boolean            @default(true)
  consecutiveCode   String?
  description       String?
  subject           String?
  assignedToId      String?
  entityId          String
  attachments       Attachment[]
  comments          Comment[]
  customFieldValues CustomFieldValue[]
  lawyerRequests    LawyerRequest[]
  likes             Like[]
  PQRCustomField    PQRCustomField[]
  assignedTo        User?              @relation("AssignedPQRS", fields: [assignedToId], references: [id])
  creator           User?              @relation(fields: [creatorId], references: [id])
  department        Department?        @relation(fields: [departmentId], references: [id])
  entity            Entity             @relation(fields: [entityId], references: [id])
  statusHistory     PQRStatusHistory[]
  customFields      CustomField[]      @relation("CustomFieldToPQRS")

  @@index([creatorId])
  @@index([departmentId])
  @@index([assignedToId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  pqrId     String
  userId    String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pqrId, userId])
  @@index([pqrId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  pqrId     String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pqrId])
}

model PQRCustomField {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  name      String
  pqrId     String
  size      Int
  type      String
  updatedAt DateTime @updatedAt
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model PQRConfig {
  id              String        @id @default(uuid())
  allowAnonymous  Boolean       @default(false)
  requireEvidence Boolean       @default(false)
  maxResponseTime Int           @default(15)
  notifyEmail     Boolean       @default(true)
  autoAssign      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  departmentId    String?       @unique
  entityId        String?       @unique
  customFields    CustomField[]
  department      Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  entity          Entity?       @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model CustomField {
  id             String    @id @default(uuid())
  name           String
  type           String
  placeholder    String?
  required       Boolean   @default(false)
  configId       String
  isForAnonymous Boolean   @default(false)
  config         PQRConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  PQRS           PQRS[]    @relation("CustomFieldToPQRS")

  @@index([configId])
}

model CustomFieldValue {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Municipality {
  id                   String             @id(map: "municipality_pkey")
  name                 String
  regionalDepartmentId String
  Entity               Entity[]
  RegionalDepartment   RegionalDepartment @relation(fields: [regionalDepartmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  OversightEntity      OversightEntity[]
}

model RegionalDepartment {
  id              String            @id(map: "regionaldepartment_pkey")
  name            String            @unique(map: "regionaldepartment_name_key")
  createdAt       DateTime?         @default(now()) @db.Timestamp(6)
  Entity          Entity[]
  Municipality    Municipality[]
  OversightEntity OversightEntity[]
}

model PQRStatusHistory {
  id        String     @id @default(uuid())
  status    PQRSStatus
  comment   String?
  createdAt DateTime   @default(now())
  pqrId     String
  userId    String
  pqr       PQRS       @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@index([pqrId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
  SUPER_ADMIN
  LAWYER
}

enum PQRSType {
  PETITION
  COMPLAINT
  CLAIM
  SUGGESTION
  REPORT
}

enum PQRSStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  FILE
  NUMBER
}

enum DocumentType {
  CC
  CE
  PPT
  NIT
  PASSPORT
  LICENSE
}

enum LawyerRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

// NextAuth.js Models

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  email     String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
} 