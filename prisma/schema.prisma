generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String              @id @default(uuid())
  password                     String
  firstName                    String
  lastName                     String
  email                        String              @unique
  phone                        String
  role                         UserRole
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  departmentId                 String?
  emailVerified                DateTime?
  verificationToken            String?             @unique
  resetToken                   String?
  resetTokenExpiry             DateTime?
  entityId                     String?
  isActive                     Boolean             @default(true)
  isVerified                   Boolean             @default(false)
  profilePicture               String?
  comments                     Comment[]
  EmailVerification            EmailVerification[]
  EntityHasUser                EntityHasUser[]
  Like                         Like[]
  notifications                Notification[]
  PQRS_PQRS_assignedToIdToUser PQRS[]              @relation("PQRS_assignedToIdToUser")
  PQRS                         PQRS[]
  PQRStatusHistory             PQRStatusHistory[]
  department                   Department?         @relation(fields: [departmentId], references: [id])
  Entity                       Entity?             @relation(fields: [entityId], references: [id])
  User_A                       User[]              @relation("UserFollows")
  User_B                       User[]              @relation("UserFollows")

  @@index([departmentId])
}

model Department {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?
  entityId    String
  entity      Entity     @relation(fields: [entityId], references: [id])
  pqrConfig   PQRConfig?
  pqrs        PQRS[]
  employees   User[]

  @@index([entityId])
}

model Entity {
  id                String              @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categoryId        String
  imageUrl          String?
  email             String?
  municipalityId    String?
  isVerified        Boolean             @default(false)
  Department        Department[]
  category          Category            @relation(fields: [categoryId], references: [id])
  Municipality      Municipality?       @relation(fields: [municipalityId], references: [id], onUpdate: NoAction)
  EntityConsecutive EntityConsecutive[]
  EntityHasUser     EntityHasUser[]
  pqrConfig         PQRConfig?
  users             User[]

  @@index([categoryId])
}

model EntityConsecutive {
  id          String    @id @default(uuid())
  entityId    String
  code        String    @unique
  consecutive Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  entity      Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([entityId])
}

model EntityHasUser {
  id       String   @id @default(uuid())
  entityId String
  userId   String
  role     UserRole
  entity   Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([entityId])
  @@index([userId])
}

model Category {
  id                String           @id @default(uuid())
  name              String           @unique
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  imageUrl          String?
  oversightEntityId String?
  oversightEntity   OversightEntity? @relation(fields: [oversightEntityId], references: [id])
  entities          Entity[]
}

model OversightEntity {
  id          String     @id @default(uuid())
  name        String     @unique
  email       String
  phone       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[]
}

model PQRS {
  id                           String             @id @default(uuid())
  type                         PQRSType
  status                       PQRSStatus         @default(PENDING)
  dueDate                      DateTime
  anonymous                    Boolean            @default(false)
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  creatorId                    String?
  departmentId                 String
  private                      Boolean            @default(true)
  consecutiveCode              String?
  description                  String?
  subject                      String?
  assignedToId                 String?
  attachments                  Attachment[]
  comments                     Comment[]
  customFieldValues            CustomFieldValue[]
  likes                        Like[]
  PQRCustomField               PQRCustomField[]
  User_PQRS_assignedToIdToUser User?              @relation("PQRS_assignedToIdToUser", fields: [assignedToId], references: [id])
  creator                      User?              @relation(fields: [creatorId], references: [id])
  department                   Department         @relation(fields: [departmentId], references: [id])
  PQRStatusHistory             PQRStatusHistory[]
  customFields                 CustomField[]      @relation("CustomFieldToPQRS")

  @@index([creatorId])
  @@index([departmentId])
  @@index([assignedToId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  pqrId     String
  userId    String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pqrId, userId])
  @@index([pqrId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  pqrId     String
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pqrId])
}

model PQRCustomField {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  name      String
  pqrId     String
  size      Int
  type      String
  updatedAt DateTime @updatedAt
  pqr       PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model PQRConfig {
  id              String        @id @default(uuid())
  allowAnonymous  Boolean       @default(false)
  requireEvidence Boolean       @default(false)
  maxResponseTime Int           @default(15)
  notifyEmail     Boolean       @default(true)
  autoAssign      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  departmentId    String        @unique
  entityId        String?       @unique
  customFields    CustomField[]
  department      Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  entity          Entity?       @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model CustomField {
  id             String    @id @default(uuid())
  name           String
  type           String
  placeholder    String?
  required       Boolean   @default(false)
  configId       String
  isForAnonymous Boolean   @default(false)
  config         PQRConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  PQRS           PQRS[]    @relation("CustomFieldToPQRS")

  @@index([configId])
}

model CustomFieldValue {
  id          String   @id @default(uuid())
  name        String
  value       String
  type        String
  placeholder String
  required    Boolean  @default(false)
  createdAt   DateTime @default(now())
  pqrId       String
  pqr         PQRS     @relation(fields: [pqrId], references: [id], onDelete: Cascade)

  @@index([pqrId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Municipality {
  id                   String             @id(map: "municipality_pkey")
  name                 String
  regionalDepartmentId String
  Entity               Entity[]
  RegionalDepartment   RegionalDepartment @relation(fields: [regionalDepartmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "municipality_regionaldepartmentid_fkey")
}

model RegionalDepartment {
  id           String         @id(map: "regionaldepartment_pkey")
  name         String         @unique(map: "regionaldepartment_name_key")
  createdat    DateTime?      @default(now()) @db.Timestamp(6)
  Municipality Municipality[]
}

model PQRStatusHistory {
  id        String     @id
  status    PQRSStatus
  comment   String?
  createdAt DateTime   @default(now())
  pqrId     String
  userId    String
  PQRS      PQRS       @relation(fields: [pqrId], references: [id], onDelete: Cascade)
  User      User       @relation(fields: [userId], references: [id])

  @@index([pqrId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
  SUPER_ADMIN
}

enum PQRSType {
  PETITION
  COMPLAINT
  CLAIM
  SUGGESTION
  REPORT
}

enum PQRSStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  FILE
  NUMBER
}
